/**
 * @file sdmmc_block_private_spi.h
 * @date 2016-08-24
 *
 * NOTE:
 * This file is generated by DAVE. Any manual modification done to this file will be lost when the code is regenerated.
 *
 * @cond
 ***********************************************************************************************************************
 * SDMMC_BLOCK v4.0.22 - Configures the SPI channel to instance to interface the SDMMC card.
 *
 * Copyright (c) 2016-2017, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes
 * with Infineon Technologies AG (dave@infineon.com).
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 *
 * 2016-01-20:
 *     - Initial version. <br>
 *
 * 2016-02-08:
 *     - Help Doc updated. <br>
 *     - Bug fixes done.<br>
 *
 * 2016-04-05:
 *     - Return status updates are done. <br>
 *     - MISRA fixes.<br>
 *     - Bug fixes done for PR.<br>
 *
 * @endcond
 *
 */

#ifndef SDMMC_BLOCK_SPI_H
#define SDMMC_BLOCK_SPI_H

/***********************************************************************************************************************
  * HEADER FILES
**********************************************************************************************************************/

#include "sdmmc_block.h"

/**********************************************************************************************************************
  * MACROS
**********************************************************************************************************************/

#ifdef SDMMC_BLOCK_SPI

/* Commands   */
/* Definitions for MMC/SDC command */
#define SDMMC_BLOCK_SPI_CMD0       (0x40U+0U)  /* GO_IDLE_STATE */
#define SDMMC_BLOCK_SPI_CMD1       (0x40U+1U)  /* SEND_OP_COND (MMC) */

#define SDMMC_BLOCK_SPI_CMD8       (0x40U+8U)  /* SEND_IF_COND */
#define SDMMC_BLOCK_SPI_CMD9       (0x40U+9U)  /* SEND_CSD */
#define SDMMC_BLOCK_SPI_CMD10      (0x40U+10U)  /* SEND_CID */
#define SDMMC_BLOCK_SPI_CMD12      (0x40U+12U)  /* STOP_TRANSMISSION */
#define SDMMC_BLOCK_SPI_CMD13      (0x40U+13U)  /* SD_STATUS (SDC) */

#define SDMMC_BLOCK_SPI_CMD16      (0x40U+16U)  /* SET_BLOCKLEN */
#define SDMMC_BLOCK_SPI_CMD17      (0x40U+17U)  /* READ_SINGLE_BLOCK */
#define SDMMC_BLOCK_SPI_CMD18      (0x40U+18U)  /* READ_MULTIPLE_BLOCK */
#define SDMMC_BLOCK_SPI_CMD23      (0x40U+23U)  /* SET_BLOCK_COUNT (MMC) */

#define SDMMC_BLOCK_SPI_CMD24      (0x40U+24U)  /* WRITE_BLOCK */
#define SDMMC_BLOCK_SPI_CMD25      (0x40U+25U)  /* WRITE_MULTIPLE_BLOCK */
#define SDMMC_BLOCK_SPI_CMD27      (0x40U+27U)  /* PROGRAM_CSD */
#define SDMMC_BLOCK_SPI_CMD32      (0x40U+32U)  /* ERASE_BLOCK_START_ADDR*/
#define SDMMC_BLOCK_SPI_CMD33      (0x40U+33U)  /* ERASE_BLOCK_END_ADDR*/
#define SDMMC_BLOCK_SPI_CMD38      (0x40U+38U)  /* ERASE_SELECTED_BLOCKS*/
#define SDMMC_BLOCK_SPI_CMD42      (0x40U+42U)  /* LOCK_UNLOCK*/

#define SDMMC_BLOCK_SPI_CMD55      (0x40U+55U)  /* APP_CMD */
#define SDMMC_BLOCK_SPI_CMD58      (0x40U+58U)  /* READ_OCR */
#define SDMMC_BLOCK_SPI_CMD59      (0x40U+59U)  /* CRC*/

#define SDMMC_BLOCK_SPI_ACMD13     (0xC0U+13U)  /* SD_STATUS (SDC) */
#define SDMMC_BLOCK_SPI_ACMD22     (0xC0U+22U)  /* SEND_NUM_WR_BLOCKS */

#define SDMMC_BLOCK_SPI_ACMD23     (0xC0U+23U)  /* SET_WR_BLK_ERASE_COUNT (SDC) */
#define SDMMC_BLOCK_SPI_ACMD41     (0x40U+41U)  /* SEND_OP_COND (SDC) */
#define SDMMC_BLOCK_SPI_ACMD51     (0x40U+51U)  /* SEND_SCR */
/* End of Commands */

/* Read write related tokens */
#define SDMMC_BLOCK_SPI_START_BLOCK_TOKEN         (0xFEU)  /**< Start single block token */
#define SDMMC_BLOCK_SPI_START_MULTI_BLOCK_TOKEN   (0xFCU)  /**< Start multiple blocks token */
#define SDMMC_BLOCK_SPI_STOP_TRANSMISSION         (0xFDU)  /**< Start multiple blocks token */

/* Command TimeOut definitions */
#define SDMMC_BLOCK_SPI_CMD_TIMOUT                (8000U)  /* Command Time Out */
#define SDMMC_BLOCK_SPI_BUSY_TIMOUT               (50000U) /* Command Time Out */
#define SDMMC_BLOCK_SPI_CSD_CID_LENGTH            (16U)    /* 16 bytes */
#define SDMMC_BLOCK_SPI_OCR_LENGTH                (4U)     /* 4 bytes */

/* Data Response definitions */
#define SDMMC_BLOCK_SPI_DR_MSK                    (0x1FU)  /* Data response mask */
#define SDMMC_BLOCK_SPI_DR_ACCEPT                 (0x05U)  /* Daata accpted */
#define SDMMC_BLOCK_SPI_DR_CRC_ERROR              (0x0BU)  /* Daata accpted */
#define SDMMC_BLOCK_SPI_DR_WRITE_ERROR            (0x0DU)  /* Daata accpted */

/* Other Definitions */
#define SDMMC_BLOCK_SPI_BYTES_PER_SECTOR          (0x200U) /* Bytes Per Sector */
#define SDMMC_BLOCK_SPI_CRC_BYTES                 (0x2U)   /* No of CRC bytes */
#define SDMMC_BLOCK_SPI_DELAY_CLOCK_COUNT         (0x1U)   /* Delay of 8-clock cycles */

#define SDMMC_BLOCK_SPI_OCR_CCS_BIT_MSK           (0x40U)
#define SDMMC_BLOCK_SPI_CSR_CARD_LOCK_STATUS_MSK  (0x01U)
#define SDMMC_BLOCK_SPI_CSR_CARD_LOCK_ERROR_MSK   (0x02U)

/**********************************************************************************************************************
  * ENUMS
**********************************************************************************************************************/

/***********************************************************************************************************************
  * DATA STRUCTURES
***********************************************************************************************************************/

/***********************************************************************************************************************
  * API Prototypes
***********************************************************************************************************************/
#ifdef __cplusplus
extern "C" {
#endif

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_Init(SDMMC_BLOCK_t *const obj);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_CardIdentificationProcess(SDMMC_BLOCK_t *const obj);

SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_SPI_ReadBlock(SDMMC_BLOCK_t *const obj,
                                               uint8_t *read_buf,
                                               const uint32_t sector_number,
                                               const uint32_t sector_count);

SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_SPI_WriteBlock(SDMMC_BLOCK_t *const obj,
                                                uint8_t *write_buf,
                                                const uint32_t sector_number,
                                                const uint32_t sector_count);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetSectorCount(SDMMC_BLOCK_t *const obj, uint32_t *sector_count);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetBlockSize(SDMMC_BLOCK_t *const obj, uint32_t *block_size);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetCsd(SDMMC_BLOCK_t *const obj, void *buffer);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetCid(SDMMC_BLOCK_t *const obj, void *buffer);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetOcr(const SDMMC_BLOCK_t *const obj, void *buffer);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetSdStatus(const SDMMC_BLOCK_t *const obj, uint8_t *buffer);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetLockStatus(SDMMC_BLOCK_t *const obj,
                                                        SDMMC_BLOCK_CARD_LOCK_STATUS_t * lock_status);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_EjectCard(SDMMC_BLOCK_t *const obj);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_EraseBlock(SDMMC_BLOCK_t *const obj,
                                                     const uint32_t start_address,
                                                     const uint32_t end_address);

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_LockUnlockCard(SDMMC_BLOCK_t *const obj,
                                                         SDMMC_BLOCK_LOCK_STRUCTURE_t *lock,
                                                         const SDMMC_BLOCK_CARD_LOCK_STATUS_t expected_state);

__STATIC_INLINE uint8_t SDMMC_BLOCK_SPI_GetState(const SDMMC_BLOCK_t *const obj)
{
  /* This is for FATFS only. In FATFS only 4 status values are stated. So extra status are neglected */
  return (obj->card_state & 0xFU);
}

__STATIC_INLINE SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetSectorSize(const SDMMC_BLOCK_t *const obj,
                                                                        void *sector_size)
{
  *(uint16_t *)sector_size = (uint16_t)512;

  return SDMMC_BLOCK_MODE_STATUS_SUCCESS;
}

__STATIC_INLINE SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetCardType(const SDMMC_BLOCK_t *const obj, void *card_type)
{
  *(uint32_t *)card_type = obj->card_type;

  return SDMMC_BLOCK_MODE_STATUS_SUCCESS;
}


#ifdef __cplusplus
}
#endif

#endif /* SDMMC_BLOCK_SPI */

#endif /* SDMMC_BLOCK_SPI_H */
